/*<TOAD_FILE_CHUNK>*/
--select * from RCV_SHIPMENT_HEADERS where SHIP_TO_ORG_ID = 149


--SELECT * FROM ORG_ORGANIZATION_DEFINITIONS where ORGANIZATION_CODE = 'KSO'









/*<TOAD_FILE_CHUNK>*/
-- PACKAGE SPECIFICATION
CREATE OR REPLACE  PACKAGE MY_PACKAGE AS 
FUNCTION GET_VENDOR_ADDRESS_FROM_ID( P_VENDOR_ID IN NUMBER)
RETURN VARCHAR2;
FUNCTION INVORG_NAME_FROM_ID (P_ORG_ID IN number)
RETURN VARCHAR2;
FUNCTION GET_LC_NUMBER_FROM_ID(P_LC_ID IN NUMBER)
 RETURN VARCHAR2;
 FUNCTION GET_LC_Date_FROM_ID(P_LC_ID IN NUMBER)
 RETURN VARCHAR2;
 FUNCTION GET_PONUM_FROM_ID(P_PO_ID IN NUMBER) 
RETURN VARCHAR2;
FUNCTION GET_OU_FROM_LC_ID(P_LC_ID IN NUMBER )
RETURN VARCHAR2;
FUNCTION GET_OU_NAME_FROM_ID(P_ORG_ID in number )
return varchar2;
 FUNCTION XXGET_ENAME_WITH_KG(P_PERSON_ID IN VARCHAR2)
RETURN CHAR;
FUNCTION GET_DEPT_FROM_EMP_ID(P_ID IN NUMBER)
RETURN VARCHAR2;
FUNCTION GET_DEPARTMENT_FRM_USERKG(P_PERSON_ID IN NUMBER) 
RETURN VARCHAR2;
FUNCTION GET_ORG_CODE_FROM_ID(P_ID IN NUMBER)
  RETURN VARCHAR2;
  FUNCTION XX_FND_REQUISITION_APP_DT_INFO(P_REQ_ID NUMBER,P_ORG_ID NUMBER )
RETURN DATE;
FUNCTION GET_QTY_FROM_ITEM_ID(P_ORG IN NUMBER, P_ITEM_ID IN NUMBER)
RETURN NUMBER;
FUNCTION GET_RATE_FROM_ITEM_ID(P_ITEM_ID IN NUMBER)
RETURN NUMBER ;
FUNCTION GET_PO_QTY_FROM_ID(P_PO_HEADER_ID IN NUMBER)
RETURN NUMBER ;
FUNCTION GET_SUP_ADDR_FROM_LC(P_SUP_NUMBER IN NUMBER)
RETURN VARCHAR2;
FUNCTION GET_RCV_AMNT_FROM_CUST_ID(P_ORG IN NUMBER, P_CUST IN NUMBER, P_DATE_FROM IN  DATE, P_DATE_TO IN  DATE )
RETURN NUMBER ;
FUNCTION GET_GRN_FROM_GRNID(P_SHIPMENT_ID IN NUMBER)
RETURN  NUMBER;
FUNCTION XX_GET_PO_NUMBER_FROM_INV (P_INVOICE_ID NUMBER)
      RETURN VARCHAR2;
       FUNCTION XX_GET_LC_NUMBER_FROM_INV (P_INVOICE_ID NUMBER)
      RETURN VARCHAR2;
      FUNCTION XX_GET_RECEIPT_NUMBER_FROM_INV (P_INVOICE_ID NUMBER)
      RETURN VARCHAR2;
      FUNCTION GET_APPLICATION_NAME_FROM_ID (P_APP_ID IN NUMBER )
      RETURN VARCHAR2;
      FUNCTION GET_DEPT_NAME_FROM_EMP_ID(P_ID IN NUMBER)
RETURN VARCHAR2;
FUNCTION XXGET_ITEM_DESCRIPTION(P_ITEM_ID IN NUMBER, P_ORG_ID IN NUMBER)
RETURN VARCHAR2;
FUNCTION XXGET_EMP_DEPT_FROM_KGID(P_KG_ID IN VARCHAR2)
RETURN CHAR;
FUNCTION GET_INVWISE_OPEN_BALANCE(p_org_id IN NUMBER, p_item_id IN NUMBER, p_sinv_code IN NUMBER , P_DATE_FROM DATE )
RETURN NUMBER ;
FUNCTION GET_ORG_NAME_FROM_ID(P_ID IN NUMBER)
  RETURN VARCHAR2;
  FUNCTION SO_ISSUE_QTY(p_org_id IN NUMBER, p_item_id IN NUMBER, P_DATE_FROM IN DATE, p_date_to IN DATE)
RETURN  NUMBER ;
FUNCTION GET_PRIOR_ITEM_COST(P_PERIOD_CODE IN VARCHAR2, P_ORGANIZATION_ID IN NUMBER,P_INVENTORY_ITEM_ID IN NUMBER )
RETURN NUMBER ;
 FUNCTION GET_PRESENT_ITEM_COST(P_PERIOD_CODE IN VARCHAR2, P_ORGANIZATION_ID IN NUMBER,P_INVENTORY_ITEM_ID IN NUMBER )
RETURN NUMBER;
FUNCTION GET_PO_NO_FROM_SHIPMNT_HDR_ID(P_PO_HEADER_ID IN NUMBER)
RETURN VARCHAR2;
FUNCTION XX_GET_GRN_FROM_AE_HEADERID(P_AE_HEADER_ID NUMBER)
      RETURN VARCHAR2;
FUNCTION GET_LAST_TRANS_DATE_FRM_ITM_ID(P_INVORG_ID IN NUMBER, P_ITEM_ID IN NUMBER)
RETURN DATE;
FUNCTION GET_LC_FROM_PO_ID(P_PO_ID IN NUMBER )
RETURN VARCHAR2;
FUNCTION GET_OFPICK_PROD_QTY(P_ORGANIZATION_ID IN NUMBER , P_ITEM_ID IN NUMBER , P_PERIOD IN VARCHAR2 )    
 return NUMBER ;
END MY_PACKAGE; 
/




























CREATE OR REPLACE PACKAGE BODY MY_PACKAGE AS  
FUNCTION GET_VENDOR_ADDRESS_FROM_ID( P_VENDOR_ID IN NUMBER)
RETURN VARCHAR2
IS 
V_ADDRESS  VARCHAR2(200);
BEGIN
SELECT DISTINCT(ADDRESS_LINE1||' --->'||ADDRESS_LINE2) INTO V_ADDRESS
FROM AP_SUPPLIER_SITES_ALL WHERE VENDOR_ID= P_VENDOR_ID;
RETURN V_ADDRESS;
 EXCEPTION
WHEN OTHERS THEN
RETURN NULL;
END;

FUNCTION INVORG_NAME_FROM_ID (P_ORG_ID IN NUMBER)
RETURN VARCHAR2
IS
V_ORG  VARCHAR2(30);
BEGIN 
SELECT ORGANIZATION_CODE INTO V_ORG
FROM ORG_ORGANIZATION_DEFINITIONS 
WHERE ORGANIZATION_ID=P_ORG_ID;
RETURN V_ORG;
EXCEPTION
WHEN OTHERS THEN
RETURN NULL;
END;

FUNCTION GET_LC_NUMBER_FROM_ID(P_LC_ID IN NUMBER)
 RETURN VARCHAR2
 IS 
 V_LC VARCHAR2(50);
 BEGIN
SELECT LC_NUMBER INTO V_LC
FROM XX_LC_DETAILS
WHERE LC_ID=P_LC_ID;
RETURN V_LC;
EXCEPTION WHEN OTHERS THEN
RETURN NULL;
END;


FUNCTION GET_LC_DATE_FROM_ID(P_LC_ID IN NUMBER)
 RETURN VARCHAR2
 IS 
 V_LC VARCHAR2(50);
 BEGIN
SELECT TO_CHAR (LC_OPENING_DATE, 'DD-MON-RRRR') INTO V_LC
FROM XX_LC_DETAILS
WHERE LC_ID=P_LC_ID;
RETURN V_LC;
EXCEPTION WHEN OTHERS THEN
RETURN NULL;
END;

FUNCTION GET_PONUM_FROM_ID(P_PO_ID IN NUMBER) 
RETURN VARCHAR2
IS 
V_PO VARCHAR2(50);
BEGIN
SELECT SEGMENT1  INTO V_PO
FROM PO_HEADERS_ALL 
WHERE PO_HEADER_ID=P_PO_ID;
RETURN V_PO;
EXCEPTION WHEN OTHERS THEN 
RETURN NULL;
END;

FUNCTION GET_OU_FROM_LC_ID(P_LC_ID IN NUMBER )
RETURN VARCHAR2
IS
V_ORG VARCHAR2(100);
BEGIN
SELECT ORGANIZATION_NAME INTO V_ORG
FROM XX_LC_DETAILS
WHERE LC_ID=P_LC_ID;
RETURN V_ORG;
EXCEPTION WHEN OTHERS THEN 
RETURN NULL;
END;

FUNCTION GET_OU_NAME_FROM_ID(P_ORG_ID IN NUMBER )
RETURN VARCHAR2
IS
V_OU_NAME  VARCHAR2(200);
BEGIN
SELECT NAME  INTO V_OU_NAME
FROM HR_OPERATING_UNITS 
WHERE ORGANIZATION_ID= P_ORG_ID;
RETURN V_OU_NAME;
EXCEPTION WHEN OTHERS THEN
RETURN NULL;
END;

FUNCTION XXGET_ENAME_WITH_KG(P_PERSON_ID IN VARCHAR2)
RETURN CHAR
IS
V_ENAME VARCHAR2(200);
BEGIN
SELECT DISTINCT PAPF.LAST_NAME||'('||FIRST_NAME||')' FULL_NAME  INTO V_ENAME  ----PAPF.FULL_NAME
FROM PER_ALL_PEOPLE_F PAPF,
PER_ALL_ASSIGNMENTS_F PAAF,
HR_ALL_ORGANIZATION_UNITS_TL HAO,
FND_USER FU
WHERE PAPF.PERSON_ID=PAAF.PERSON_ID
AND PAAF.ORGANIZATION_ID=HAO.ORGANIZATION_ID
AND FU.EMPLOYEE_ID=PAPF.PERSON_ID
AND FU.EMPLOYEE_ID=PAAF.PERSON_ID
AND FU.PERSON_PARTY_ID=PAPF.PARTY_ID
AND TRUNC(SYSDATE) BETWEEN PAPF.EFFECTIVE_START_DATE AND PAPF.EFFECTIVE_END_DATE
AND TRUNC(SYSDATE) BETWEEN PAAF.EFFECTIVE_START_DATE AND PAAF.EFFECTIVE_END_DATE
AND FU.USER_ID=P_PERSON_ID;
RETURN(V_ENAME);
EXCEPTION WHEN OTHERS THEN
RETURN(NULL);
END;
FUNCTION GET_DEPT_FROM_EMP_ID(P_ID IN NUMBER)
RETURN VARCHAR2
IS 
V_DEPT VARCHAR2(100);
BEGIN
SELECT  LIST_NAME||'('||PD.SEGMENT3||')'   INTO V_DEPT
FROM   PER_PEOPLE_F PPF,
       PER_ALL_ASSIGNMENTS_F PAAF,
       PER_JOBS PJ,
       PER_JOB_DEFINITIONS PJD,
       PER_ALL_POSITIONS PP,
       PER_POSITION_DEFINITIONS PD
WHERE 1=1
   AND PPF.PERSON_ID = PAAF.PERSON_ID
   AND PAAF.JOB_ID(+) = PJ.JOB_ID
   AND PJ.JOB_DEFINITION_ID(+) = PJD.JOB_DEFINITION_ID
   AND PP.POSITION_ID=PAAF.POSITION_ID
   AND PP.POSITION_DEFINITION_ID=PD.POSITION_DEFINITION_ID
   AND PPF.PERSON_ID =P_ID;
   RETURN V_DEPT;
  EXCEPTION WHEN OTHERS THEN 
  RETURN NULL;
   END;
   
  FUNCTION GET_DEPARTMENT_FRM_USERKG(P_PERSON_ID IN NUMBER) 
RETURN VARCHAR2
IS
V_DEPARTMENT VARCHAR2(200);
BEGIN
  SELECT DISTINCT DEPARTMENT_NAME  INTO V_DEPARTMENT
  FROM WBI_HR_EMPLOYEE_DETAILS_D
WHERE PERSON_ID=P_PERSON_ID
AND DEPARTMENT_NAME IS NOT NULL
AND SYSDATE BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE;
RETURN(V_DEPARTMENT);
EXCEPTION WHEN OTHERS THEN
    RETURN(NULL);
END;

FUNCTION GET_ORG_CODE_FROM_ID(P_ID IN NUMBER)
  RETURN VARCHAR2
  IS 
  V_CODE VARCHAR2(100);
  BEGIN
   SELECT ORGANIZATION_CODE INTO V_CODE
    FROM ORG_ORGANIZATION_DEFINITIONS  
    WHERE ORGANIZATION_ID = P_ID;
    RETURN V_CODE;
    EXCEPTION WHEN OTHERS THEN
    RETURN NULL;
  END;
  
  FUNCTION XX_FND_REQUISITION_APP_DT_INFO(P_REQ_ID NUMBER,P_ORG_ID NUMBER )
RETURN DATE 
IS
V_ALL DATE;
BEGIN
SELECT    PRH.APPROVED_DATE
    INTO V_ALL
  FROM   PO_REQUISITION_HEADERS_ALL PRH
 WHERE PRH.REQUISITION_HEADER_ID = P_REQ_ID
--         AND NVL(AUTHORIZATION_STATUS,'INCOMPLETE')='APPROVED'
         AND PRH.ORG_ID = P_ORG_ID;
  RETURN(V_ALL);
EXCEPTION WHEN OTHERS THEN  
  RETURN(NULL);
END;

FUNCTION GET_QTY_FROM_ITEM_ID(P_ORG IN NUMBER, P_ITEM_ID IN NUMBER)
RETURN NUMBER
IS
V_QTY NUMBER;
BEGIN
SELECT AVG(UNIT_PRICE) INTO V_QTY
FROM PO_HEADERS_ALL POH, PO_LINES_ALL POL, PO_LINE_LOCATIONS_ALL PLL
WHERE POH.PO_HEADER_ID = POL.PO_HEADER_ID
AND POL.PO_LINE_ID=PLL.PO_LINE_ID
AND SHIP_TO_ORGANIZATION_ID =P_ORG
AND POL.ITEM_ID = P_ITEM_ID;
RETURN V_QTY;
EXCEPTION WHEN OTHERS THEN
RETURN NULL;
END;

FUNCTION GET_RATE_FROM_ITEM_ID(P_ITEM_ID IN NUMBER)
RETURN NUMBER 
IS 
V_RATE NUMBER;
BEGIN
SELECT DISTINCT NVL(RATE,1)  INTO V_RATE
FROM PO_HEADERS_ALL POH , PO_LINES_ALL POL
WHERE POH.PO_HEADER_ID = POL.PO_HEADER_ID
AND APPROVED_DATE <= SYSDATE
--and RATE is not null
AND  POL.ITEM_ID = P_ITEM_ID ;  --  'CARBON BRUSH, SIZE 16X32X50MM FOR IM';
RETURN V_RATE;
EXCEPTION WHEN OTHERS THEN 
RETURN NULL;
END;

FUNCTION GET_PO_QTY_FROM_ID(P_PO_HEADER_ID IN NUMBER)
RETURN NUMBER 
IS 
V_POQTY NUMBER;
BEGIN
SELECT SUM(QUANTITY) INTO V_POQTY
FROM PO_LINES_ALL 
WHERE PO_HEADER_ID = P_PO_HEADER_ID;
RETURN V_POQTY;
EXCEPTION WHEN OTHERS THEN 
RETURN NULL;
END;

FUNCTION GET_SUP_ADDR_FROM_LC(P_SUP_NUMBER IN NUMBER)
RETURN VARCHAR2
IS 
V_SUPPLIER VARCHAR2(200);
BEGIN
SELECT DISTINCT ADDRESS_LINE1  INTO V_SUPPLIER
FROM AP_SUPPLIER_SITES_ALL A, AP_SUPPLIERS B , XX_LC_DETAILS  C
WHERE A.VENDOR_ID = B.VENDOR_ID
AND B.SEGMENT1 = C.SUPPLIER_NUMBER
AND B.SEGMENT1 = P_SUP_NUMBER;
RETURN V_SUPPLIER;
EXCEPTION WHEN OTHERS THEN 
RETURN NULL;
END;

FUNCTION GET_RCV_AMNT_FROM_CUST_ID(P_ORG IN NUMBER, P_CUST IN NUMBER, P_DATE_FROM IN  DATE, P_DATE_TO IN  DATE )
RETURN NUMBER 
IS 
V_AMOUNT NUMBER;
BEGIN
SELECT  GREATEST (NVL (SUM (AMOUNT), SUM (AMOUNT)), 0) * NVL (EXCHANGE_RATE, 1) 
INTO V_AMOUNT
FROM AR_CASH_RECEIPTS_ALL
WHERE PAY_FROM_CUSTOMER = P_CUST
AND CREATION_DATE BETWEEN P_DATE_FROM AND P_DATE_TO
AND ORG_ID = P_ORG
GROUP BY EXCHANGE_RATE;
RETURN V_AMOUNT;
EXCEPTION WHEN OTHERS THEN
RETURN (NULL);
END;

FUNCTION GET_GRN_FROM_GRNID(P_SHIPMENT_ID IN NUMBER)
RETURN  NUMBER
IS V_GRNNUMBER NUMBER;
BEGIN
SELECT DISTINCT RECEIPT_NUM INTO V_GRNNUMBER
FROM RCV_SHIPMENT_HEADERS RH, RCV_SHIPMENT_LINES RL
WHERE RH.SHIPMENT_HEADER_ID = RL.SHIPMENT_HEADER_ID
AND  RL.SHIPMENT_HEADER_ID= P_SHIPMENT_ID;
RETURN V_GRNNUMBER;
EXCEPTION
WHEN OTHERS THEN
RETURN NULL;
END;

FUNCTION XX_GET_PO_NUMBER_FROM_INV (P_INVOICE_ID NUMBER)
      RETURN VARCHAR2
   IS
      V_RESULT        AP_INVOICE_LINES_V.PO_NUMBER%TYPE;
      V_RESULT_LIST   VARCHAR2 (2000) := NULL;

      CURSOR P_CURSOR
      IS
         SELECT DISTINCT PO_NUMBER
           FROM AP_INVOICE_LINES_V
          WHERE INVOICE_ID = P_INVOICE_ID;
   BEGIN
      OPEN P_CURSOR;

      LOOP
         FETCH P_CURSOR INTO V_RESULT;

         EXIT WHEN P_CURSOR%NOTFOUND;

         IF (V_RESULT_LIST IS NOT NULL)
         THEN
            V_RESULT_LIST := V_RESULT_LIST || ', ';
         END IF;

         V_RESULT_LIST := V_RESULT_LIST || V_RESULT;
      END LOOP;

      CLOSE P_CURSOR;

      RETURN (V_RESULT_LIST);
   END;

   FUNCTION XX_GET_LC_NUMBER_FROM_INV (P_INVOICE_ID NUMBER)
      RETURN VARCHAR2
   IS
      V_RESULT        XX_LC_DETAILS.LC_NUMBER%TYPE;
      V_RESULT_LIST   VARCHAR2 (2000) := NULL;

      CURSOR P_CURSOR
      IS
       SELECT DISTINCT LC_NUMBER
    FROM   AP_INVOICE_LINES_V PH, XX_LC_DETAILS LC           
       WHERE PH.PO_HEADER_ID= LC.PO_HEADER_ID   
       AND INVOICE_ID = P_INVOICE_ID;
   BEGIN
      OPEN P_CURSOR;

      LOOP
         FETCH P_CURSOR INTO V_RESULT;

         EXIT WHEN P_CURSOR%NOTFOUND;

         IF (V_RESULT_LIST IS NOT NULL)
         THEN
            V_RESULT_LIST := V_RESULT_LIST;
         END IF;

         V_RESULT_LIST := V_RESULT_LIST ||','|| V_RESULT;
      END LOOP;

      CLOSE P_CURSOR;

      RETURN (V_RESULT_LIST);
   END;

FUNCTION XX_GET_RECEIPT_NUMBER_FROM_INV (P_INVOICE_ID NUMBER)
      RETURN VARCHAR2
   IS
      V_RESULT        AP_INVOICE_LINES_V.RECEIPT_NUMBER%TYPE;
      V_RESULT_LIST   VARCHAR2 (2000) := NULL;

      CURSOR P_CURSOR
      IS
         SELECT DISTINCT RECEIPT_NUMBER
           FROM AP_INVOICE_LINES_V
          WHERE INVOICE_ID = P_INVOICE_ID;
   BEGIN
      OPEN P_CURSOR;

      LOOP
         FETCH P_CURSOR INTO V_RESULT;

         EXIT WHEN P_CURSOR%NOTFOUND;

         IF (V_RESULT_LIST IS NOT NULL)
         THEN
            V_RESULT_LIST := V_RESULT_LIST || ', ';
         END IF;

         V_RESULT_LIST := V_RESULT_LIST || V_RESULT;
      END LOOP;

      CLOSE P_CURSOR;

      RETURN (V_RESULT_LIST);
   END;

   FUNCTION GET_APPLICATION_NAME_FROM_ID (P_APP_ID IN NUMBER )
 RETURN VARCHAR2 IS 
 V_NAME VARCHAR2(1000);
 BEGIN
 SELECT 
 FAT.APPLICATION_NAME   INTO V_NAME
  FROM FND_APPLICATION     FA,
       FND_APPLICATION_TL  FAT
 WHERE FA.APPLICATION_ID = FAT.APPLICATION_ID
   AND FAT.LANGUAGE      = USERENV('LANG')
    AND FA.APPLICATION_ID = P_APP_ID  ;
    RETURN V_NAME;
    EXCEPTION
WHEN OTHERS THEN
RETURN NULL;
  END;

  FUNCTION GET_DEPT_NAME_FROM_EMP_ID(P_ID IN NUMBER)
RETURN VARCHAR2
IS 
V_DEPT VARCHAR2(100);
BEGIN
SELECT  UPPER(PD.SEGMENT3)   INTO V_DEPT
FROM   PER_PEOPLE_F PPF,
       PER_ALL_ASSIGNMENTS_F PAAF,
       PER_JOBS PJ,
       PER_JOB_DEFINITIONS PJD,
       PER_ALL_POSITIONS PP,
       PER_POSITION_DEFINITIONS PD
WHERE 1=1
   AND PPF.PERSON_ID = PAAF.PERSON_ID
   AND PAAF.JOB_ID(+) = PJ.JOB_ID
   AND PJ.JOB_DEFINITION_ID(+) = PJD.JOB_DEFINITION_ID
   AND PP.POSITION_ID=PAAF.POSITION_ID
   AND PP.POSITION_DEFINITION_ID=PD.POSITION_DEFINITION_ID
   and ppf.PERSON_ID =P_ID;
   RETURN V_DEPT;
  EXCEPTION WHEN OTHERS THEN 
  RETURN NULL;
   END;

FUNCTION XXGET_ITEM_DESCRIPTION(P_ITEM_ID IN NUMBER, P_ORG_ID IN NUMBER)
RETURN VARCHAR2
IS
V_ITEM_DESC VARCHAR2(200);
BEGIN
  SELECT DESCRIPTION INTO V_ITEM_DESC
 FROM MTL_SYSTEM_ITEMS_B
 WHERE INVENTORY_ITEM_ID= P_ITEM_ID
 and ORGANIZATION_ID = P_ORG_ID;
RETURN(V_ITEM_DESC);
EXCEPTION WHEN OTHERS THEN
 RETURN(NULL);
END;

FUNCTION XXGET_EMP_DEPT_FROM_KGID(P_KG_ID IN VARCHAR2)
RETURN CHAR
IS
V_DEPT VARCHAR2(200);
BEGIN

SELECT SUBSTR(PAP.NAME,INSTR(PAP.NAME,'.',2,1)+1,INSTR(SUBSTR(PAP.NAME,INSTR(PAP.NAME,'.',2,1)+1),'.',1)-1) DEPT
----SUBSTR(PAP.NAME,INSTR(PAP.NAME,'.',3,2)+1,INSTR(SUBSTR(PAP.NAME,INSTR(PAP.NAME,'.',3,2)+1),'.',1)-1)  DEPT
INTO V_DEPT     
FROM PER_ALL_PEOPLE_F      PAPF
,PER_ALL_ASSIGNMENTS_F PAAF
,PER_ALL_POSITIONS     PAP
,FND_USER   FU 
WHERE PAPF.PERSON_ID=PAAF.PERSON_ID
AND PAPF.CURRENT_EMPLOYEE_FLAG='Y'
AND PAAF.PRIMARY_FLAG='Y'
AND PAAF.POSITION_ID=PAP.POSITION_ID
AND TRUNC(SYSDATE) BETWEEN TRUNC(PAPF.EFFECTIVE_START_DATE) 
AND   TRUNC(PAPF.EFFECTIVE_END_DATE)   
AND TRUNC(SYSDATE) BETWEEN TRUNC(PAAF.EFFECTIVE_START_DATE) 
AND   TRUNC(PAAF.EFFECTIVE_END_DATE)
AND PAPF.PERSON_ID=FU.EMPLOYEE_ID
AND PAPF.FIRST_NAME= P_KG_ID; --'KG-4079';
RETURN(V_DEPT);
EXCEPTION WHEN OTHERS THEN
RETURN(NULL);
END;

FUNCTION GET_INVWISE_OPEN_BALANCE(p_org_id IN NUMBER, p_item_id IN NUMBER, p_sinv_code IN NUMBER , P_DATE_FROM DATE )
RETURN NUMBER 
IS
V_QTY NUMBER;
BEGIN
SELECT SUM(mmt.primary_quantity)  INTO V_QTY
              FROM   mtl_material_transactions mmt
              WHERE   1 = 1
                     AND (p_org_id IS NULL OR mmt.organization_id = p_org_id)
                     AND (p_item_id IS NULL OR mmt.inventory_item_id = p_item_id)
                     AND (p_sinv_code IS NULL OR mmt.subinventory_code = p_sinv_code)
                     AND TRUNC (mmt.transaction_date) < P_DATE_FROM
                     AND mmt.transaction_type_id NOT IN   (10008,80);
                     RETURN V_QTY;
EXCEPTION WHEN OTHERS THEN
RETURN NULL;
END;
FUNCTION GET_ORG_NAME_FROM_ID(P_ID IN NUMBER)
  RETURN VARCHAR2
  IS 
  V_NAME VARCHAR2(200);
  BEGIN
   SELECT ORGANIZATION_NAME INTO V_NAME
     FROM ORG_ORGANIZATION_DEFINITIONS  
    WHERE ORGANIZATION_ID = P_ID;
    RETURN V_NAME;
    EXCEPTION WHEN OTHERS THEN
    RETURN NULL;
  END;
  FUNCTION SO_ISSUE_QTY(p_org_id IN NUMBER, p_item_id IN NUMBER, P_DATE_FROM IN DATE, p_date_to IN DATE)
RETURN  NUMBER 
IS
V_QTY NUMBER;
BEGIN
 select ABS(SUM(NVL(mmt.primary_quantity,0)))   INTO V_QTY
                     from mtl_material_transactions mmt,
                     mtl_transaction_types mtt,
                      invfv_material_transactions imt
                     where 1=1
                     and  mmt.transaction_type_id = mtt.transaction_type_id
                   -- and  mtt.transaction_action_id = 1 AND MTT.transaction_source_type_id =2 AND SIGN (mmt.primary_quantity) = -1
                     AND (p_org_id IS NULL OR mmt.organization_id = p_org_id)
                     AND (p_item_id IS NULL OR mmt.inventory_item_id = p_item_id)
                     AND TRUNC (mmt.transaction_date) BETWEEN P_DATE_FROM AND  p_date_to
                  --  AND TRUNC (mmt.transaction_date) >P_DATE_FROM
                --    AND TRUNC (mmt.transaction_date) < p_date_to
                     AND mmt.transaction_type_id NOT IN  (10008,80)
                      and  mtt.transaction_type_name = 'Sales order issue'
              AND mmt.transaction_type_id NOT IN   (10008,80)
              AND mmt.transaction_id = imt.transaction_id ;
              RETURN V_QTY;
EXCEPTION WHEN OTHERS THEN
RETURN NULL;
END;
  FUNCTION GET_PRIOR_ITEM_COST(P_PERIOD_CODE IN VARCHAR2, P_ORGANIZATION_ID IN NUMBER,P_INVENTORY_ITEM_ID IN NUMBER )
RETURN NUMBER IS
    V_COST number;
    BEGIN
    SELECT 
  SUM( DISTINCT CMPNT_COST) PRIOR_ITEM_COST INTO V_COST
FROM apps.CM_CMPT_DTL ccd ,
  apps.mtl_system_items_b msib ,
  apps.mtl_parameters mp ,
  apps.CM_MTHD_MST cmm,
  gmf_period_statuses xop,
  CM_CLDR_DTL cal,
  CM_CMPT_MST_VL ccmv,
  mtl_item_categories_v mic,
  mtl_category_sets_v mcs
WHERE msib.inventory_item_id=ccd.inventory_item_id
AND msib.inventory_item_id  =mic.inventory_item_id
AND msib.organization_id    =mic.organization_id
AND mcs.category_set_id     = mic.category_set_id
AND ccmv.cost_cmpntcls_id   = ccd.cost_cmpntcls_id
AND cal.period_code         =xop.period_code
AND msib.organization_id    =ccd.organization_id
AND cmm.cost_type_id        =ccd.cost_type_id
AND mp.organization_id      = ccd.organization_id
AND mp.ORGANIZATION_ID =P_ORGANIZATION_ID
AND ccd.inventory_item_id = P_INVENTORY_ITEM_ID
AND ccd.period_id  =xop.period_id
AND ccd.delete_mark =0
AND xop.period_code = TO_CHAR( to_date(P_PERIOD_CODE,'MON-YY'),'MON-YY');  --- PRIOR PERIOD COST
RETURN V_COST ;
    EXCEPTION
      WHEN OTHERS THEN 
      RETURN 0;
    END;
    FUNCTION GET_PRESENT_ITEM_COST(P_PERIOD_CODE IN VARCHAR2, P_ORGANIZATION_ID IN NUMBER,P_INVENTORY_ITEM_ID IN NUMBER )
RETURN NUMBER IS
    V_COST number;
    BEGIN
    SELECT 
  SUM( DISTINCT CMPNT_COST) PRIOR_ITEM_COST INTO V_COST
FROM apps.CM_CMPT_DTL ccd ,
  apps.mtl_system_items_b msib ,
  apps.mtl_parameters mp ,
  apps.CM_MTHD_MST cmm,
  gmf_period_statuses xop,
  CM_CLDR_DTL cal,
  CM_CMPT_MST_VL ccmv,
  mtl_item_categories_v mic,
  mtl_category_sets_v mcs
WHERE msib.inventory_item_id=ccd.inventory_item_id
AND msib.inventory_item_id  =mic.inventory_item_id
AND msib.organization_id    =mic.organization_id
AND mcs.category_set_id     = mic.category_set_id
AND ccmv.cost_cmpntcls_id   = ccd.cost_cmpntcls_id
AND cal.period_code         =xop.period_code
AND msib.organization_id    =ccd.organization_id
AND cmm.cost_type_id        =ccd.cost_type_id
AND mp.organization_id      = ccd.organization_id
AND mp.ORGANIZATION_ID =P_ORGANIZATION_ID
AND ccd.inventory_item_id = P_INVENTORY_ITEM_ID
AND ccd.period_id  =xop.period_id
AND ccd.delete_mark =0
 AND UPPER(xop.period_code)=TO_CHAR(TRUNC(TO_DATE(P_PERIOD_CODE,'MON-YY')-1),'MON-YY'); -- PRESENT_COST
RETURN V_COST ;
    EXCEPTION
      WHEN OTHERS THEN 
      RETURN 0;
    END;
FUNCTION GET_PO_NO_FROM_SHIPMNT_HDR_ID(P_PO_HEADER_ID IN NUMBER)
RETURN VARCHAR2
IS
V_PO_NUMBER NUMBER;
BEGIN
SELECT DISTINCT SEGMENT1 into V_PO_NUMBER
 FROM RCV_SHIPMENT_HEADERS RH, RCV_SHIPMENT_LINES RL, PO_HEADERS_ALL PH
WHERE RH.SHIPMENT_HEADER_ID= RL.SHIPMENT_HEADER_ID
and RL.PO_HEADER_ID= PH.PO_HEADER_ID
and rh.SHIPMENT_HEADER_ID = P_PO_HEADER_ID;
RETURN V_PO_NUMBER;
EXCEPTION WHEN OTHERS THEN
RETURN NULL;
END;
FUNCTION XX_GET_GRN_FROM_AE_HEADERID(P_AE_HEADER_ID NUMBER)
      RETURN VARCHAR2
   IS
      V_RESULT        AP_INVOICE_LINES_V.RECEIPT_NUMBER%TYPE;
      V_RESULT_LIST   VARCHAR2 (2000) := NULL;

      CURSOR P_CURSOR
      IS
SELECT  DISTINCT  RH.RECEIPT_NUM
FROM ap.ap_invoices_all aia, AP_INVOICE_LINES_ALL AL, RCV_SHIPMENT_LINES RL, RCV_SHIPMENT_HEADERS RH,
xla.xla_transaction_entities XTE,
xla.xla_events xev,
xla.xla_ae_headers XAH
WHERE aia.INVOICE_ID = xte.source_id_int_1
and AIA.INVOICE_ID= AL.INVOICE_ID
and AL.RCV_SHIPMENT_LINE_ID = RL.SHIPMENT_LINE_ID 
and RH.SHIPMENT_HEADER_ID = RL.SHIPMENT_HEADER_ID
AND xev.entity_id = xte.entity_id
AND xah.entity_id = xte.entity_id
AND XAH.AE_HEADER_ID= P_AE_HEADER_ID ;
   BEGIN
      OPEN P_CURSOR;

      LOOP
         FETCH P_CURSOR INTO V_RESULT;

         EXIT WHEN P_CURSOR%NOTFOUND;

         IF (V_RESULT_LIST IS NOT NULL)
         THEN
            V_RESULT_LIST := V_RESULT_LIST || ', ';
         END IF;

         V_RESULT_LIST := V_RESULT_LIST || V_RESULT;
      END LOOP;

      CLOSE P_CURSOR;

      RETURN (V_RESULT_LIST);
   END;
   FUNCTION GET_LAST_TRANS_DATE_FRM_ITM_ID(P_INVORG_ID IN NUMBER, P_ITEM_ID IN NUMBER)
RETURN DATE
IS 
V_DATE DATE;
BEGIN
SELECT  TO_CHAR(TRUNC(MAX(RT.TRANSACTION_DATE)),'DD-MON-RRRR') INTO V_DATE
--MAX(RT.TRANSACTION_DATE) INTO V_DATE
FROM RCV_SHIPMENT_LINES RL , RCV_TRANSACTIONS RT
WHERE RL.SHIPMENT_LINE_ID=RT.SHIPMENT_LINE_ID
and rl.item_id= P_ITEM_ID
AND RT.ORGANIZATION_ID = P_INVORG_ID
and RT.TRANSACTION_TYPE = 'DELIVER';
RETURN V_DATE;
EXCEPTION WHEN OTHERS THEN 
RETURN NULL;
END;

FUNCTION GET_LC_FROM_PO_ID(P_PO_ID IN NUMBER )
RETURN VARCHAR2
IS
V_LC VARCHAR2(100);
BEGIN
SELECT LC_NUMBER INTO V_LC
FROM XX_LC_DETAILS
WHERE PO_HEADER_ID=P_PO_ID;
RETURN V_LC;
EXCEPTION WHEN OTHERS THEN 
RETURN NULL;
END;
FUNCTION GET_OFPICK_PROD_QTY(P_ORGANIZATION_ID IN NUMBER , P_ITEM_ID IN NUMBER , P_PERIOD IN VARCHAR2 )    
 return NUMBER 
 IS 
 V_QTY NUMBER;
 BEGIN
   select SUM(PRIMARY_QUANTITY) INTO V_QTY
    from MTL_MATERIAL_TRANSACTIONS 
  WHERE ORGANIZATION_ID= P_ORGANIZATION_ID
  and TRANSACTION_TYPE_ID= 18
  and   INVENTORY_ITEM_ID = P_ITEM_ID  -- IN (244)
   and   INVENTORY_ITEM_ID IN (243,244)
  and  TO_CHAR(TRANSACTION_DATE,'MON-YY')= P_PERIOD; -- 'OCT-18' 
  RETURN V_QTY;
     EXCEPTION
      WHEN OTHERS THEN 
      RETURN 0;
 END;
END MY_PACKAGE; 
/

